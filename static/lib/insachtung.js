// Generated by CoffeeScript 1.4.0
(function() {
  var Bitmap, Bonus, Controller, CrashController, NoWall, Painter, Player, PlayerInstance, Round, canvas, controller, playerSelectionForm, playersConfiguration,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Bitmap = (function() {

    function Bitmap(width, height, boundariesWidth) {
      this.width = width;
      this.height = height;
      this.boundariesWidth = boundariesWidth;
      this.bitmap = new Array(this.width * this.height);
    }

    return Bitmap;

  })();

  Painter = (function() {

    function Painter(bitmap) {
      this.bitmap = bitmap;
      this.canvas = document.getElementById("canvas");
      this.context = this.canvas.getContext('2d');
    }

    Painter.prototype.paintTrace = function(player) {
      return this.drawLine(player.lastPos.x, player.lastPos.y, player.pos.x, player.pos.y, player.size, player["static"].color);
    };

    Painter.prototype.clearTrace = function(player) {
      return this.drawLine(player.lastPos.x, player.lastPos.y, player.pos.x, player.pos.y, player.size, "white");
    };

    Painter.prototype.paintHead = function(player) {
      console.log("painting head");
      return this.drawCircle(player.pos.x, player.pos.y, player.size / 2, "yellow");
    };

    Painter.prototype.clearHead = function(player) {
      return this.drawCircle(player.pos.x, player.pos.y, player.size / 2, "white");
    };

    Painter.prototype.paintLastHead = function(player) {
      return this.drawCircle(player.lastPos.x, player.lastPos.y, player.size / 2, player["static"].color);
    };

    Painter.prototype.clearLastHead = function(player) {
      return this.drawCircle(player.lastPos.x, player.lastPos.y, player.size / 2, "white");
    };

    Painter.prototype.drawLine = function(x1, y1, x2, y2, size, color) {
      this.context.beginPath();
      this.context.strokeStyle = color;
      this.context.lineWidth = size;
      this.context.moveTo(x1, y1);
      this.context.lineTo(x2, y2);
      return this.context.stroke();
    };

    Painter.prototype.drawCircle = function(x, y, radius, color) {
      this.context.beginPath();
      this.context.arc(x, y, radius, 0, 2 * Math.PI, true);
      this.context.fillStyle = color;
      return this.context.fill();
    };

    Painter.prototype.paintBoundaries = function() {
      this.context.fillStyle = "yellow";
      this.context.fillRect(0, 0, this.bitmap.width, this.bitmap.height);
      return this.context.clearRect(this.bitmap.boundariesWidth, this.bitmap.boundariesWidth, this.bitmap.width - 2 * this.bitmap.boundariesWidth, this.bitmap.height - 2 * this.bitmap.boundariesWidth);
    };

    Painter.prototype.clearBoard = function() {
      this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
      return this.paintBoundaries();
    };

    return Painter;

  })();

  Bonus = (function() {

    function Bonus(player, duration) {
      this.player = player;
      this.duration = duration;
    }

    return Bonus;

  })();

  NoWall = (function(_super) {

    __extends(NoWall, _super);

    function NoWall() {
      return NoWall.__super__.constructor.apply(this, arguments);
    }

    NoWall.prototype.play = function() {
      this.player["static"].painter.clearTrace(this.player);
      this.player["static"].painter.clearHead(this.player);
      this.player["static"].painter.clearLastHead(this.player);
      return --this.duration;
    };

    return NoWall;

  })(Bonus);

  Round = (function() {

    function Round(controller) {
      var player, _i, _len, _ref;
      this.controller = controller;
      this.isOver = false;
      this.alivePlayers = [];
      _ref = this.controller.players;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        player = _ref[_i];
        this.alivePlayers.push(new PlayerInstance(player));
      }
      this.controller.crashController.setActiveRound(this);
    }

    Round.prototype.launch = function() {
      var delay, main,
        _this = this;
      this.controller.painter.clearBoard();
      delay = 1 / 30;
      main = function() {
        var player, _i, _j, _len, _len1, _ref, _ref1, _results;
        if (!_this.isOver) {
          setTimeout(main, delay);
          _ref = _this.alivePlayers;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            player = _ref[_i];
            if ((Math.random() * 10) < 0.015) {
              player.bonuses.push(new NoWall(player, 25));
            }
            player.play();
          }
          _ref1 = _this.alivePlayers;
          _results = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            player = _ref1[_j];
            _results.push(_this.controller.crashController.checkForCrashes(player));
          }
          return _results;
        }
      };
      return setTimeout(main, delay);
    };

    Round.prototype.notifyPlayerDeath = function(deadPlayer) {
      var p, player, tmp, _i, _j, _len, _len1, _ref, _ref1;
      _ref = this.alivePlayers;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        player = _ref[_i];
        if (player !== deadPlayer) {
          player["static"].score += 1;
        } else {
          tmp = new Array();
          _ref1 = this.alivePlayers;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            p = _ref1[_j];
            if (p === deadPlayer) {
              tmp.push(p);
            }
          }
          this.alivePlayers = tmp;
        }
      }
      if (this.alivePlayers.length === 1) {
        this.isOver = true;
        return this.controller.notifyRoundIsDone();
      }
    };

    return Round;

  })();

  Player = (function() {

    function Player(name, color, keys, painter) {
      this.name = name;
      this.color = color;
      this.keys = keys;
      this.painter = painter;
      this.score = 0;
    }

    return Player;

  })();

  PlayerInstance = (function() {

    function PlayerInstance(_static) {
      var _this = this;
      this["static"] = _static;
      this.pos = {
        x: Math.floor((Math.random() * 700) + 100),
        y: Math.floor((Math.random() * 700) + 100)
      };
      this.lastPos = {
        x: void 0,
        y: void 0
      };
      this.radius = 1;
      this.course = Math.floor((Math.random() * 2 * Math.PI) + 0);
      this.size = 5;
      this.bonuses = [];
      this.keysPressed = [false, false];
      this.lastKeyPressed = "none";
      document.addEventListener("keydown", function(event) {
        if (event.keyCode === _this["static"].keys[0]) {
          _this.lastKeyPressed = "left";
          return _this.keysPressed[0] = true;
        } else if (event.keyCode === _this["static"].keys[1]) {
          _this.lastKeyPressed = "right";
          return _this.keysPressed[1] = true;
        }
      }, false);
      document.addEventListener("keyup", function(event) {
        if (event.keyCode === _this["static"].keys[0]) {
          _this.keysPressed[0] = false;
          if (_this.keysPressed[1]) {
            _this.lastKeyPressed = "right";
          } else {
            _this.lastKeyPressed = "none";
          }
        }
        if (event.keyCode === _this["static"].keys[1]) {
          _this.keysPressed[1] = false;
          if (_this.keysPressed[0]) {
            return _this.lastKeyPressed = "left";
          } else {
            return _this.lastKeyPressed = "none";
          }
        }
      }, false);
    }

    PlayerInstance.prototype.play = function() {
      this.updateCourse();
      this.updatePos();
      this.paint();
      return this.playBonuses();
    };

    PlayerInstance.prototype.updatePos = function() {
      this.lastPos.x = this.pos.x;
      this.lastPos.y = this.pos.y;
      this.pos.x = this.pos.x + Math.cos(this.course) * this.radius;
      return this.pos.y = this.pos.y + Math.sin(this.course) * this.radius;
    };

    PlayerInstance.prototype.updateCourse = function() {
      var val;
      if (this.lastKeyPressed === "left") {
        val = -2 * Math.PI / 320;
      } else if (this.lastKeyPressed === "right") {
        val = 2 * Math.PI / 320;
      } else {
        val = 0;
      }
      this.course = this.course + val;
      if (this.course > 2 * Math.PI) {
        return this.course -= 2 * Math.PI;
      }
    };

    PlayerInstance.prototype.paint = function() {
      this["static"].painter.paintTrace(this);
      this["static"].painter.paintLastHead(this);
      return this["static"].painter.paintHead(this);
    };

    PlayerInstance.prototype.playBonuses = function() {
      var i, _results;
      i = 0;
      _results = [];
      while (i < this.bonuses.length) {
        if (this.bonuses[i].duration === 0) {
          _results.push(this.bonuses.splice(i, 1));
        } else {
          this.bonuses[i].play();
          _results.push(i++);
        }
      }
      return _results;
    };

    return PlayerInstance;

  })();

  Controller = (function() {

    function Controller() {
      this.players;
      this.bitmap = new Bitmap(800, 800, 20);
      this.painter = new Painter(this.bitmap);
      this.crashController = new CrashController(this);
    }

    Controller.prototype.notifyRoundIsDone = function() {
      var player, round, _i, _j, _len, _len1, _ref, _ref1;
      _ref = this.players;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        player = _ref[_i];
        console.log(player.name + ": " + player.score);
      }
      _ref1 = this.players;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        player = _ref1[_j];
        if (player.score >= (this.players.length - 1) * 10) {
          return;
        }
      }
      round = new Round(this);
      return round.launch();
    };

    Controller.prototype.run = function(playersConfiguration) {
      var player, round, _i, _len;
      this.players = new Array();
      for (_i = 0, _len = playersConfiguration.length; _i < _len; _i++) {
        player = playersConfiguration[_i];
        this.players.push(new Player(player.name, player.colour, new Array(player.left, player.right), this.painter));
      }
      round = new Round(this);
      return round.launch();
    };

    return Controller;

  })();

  CrashController = (function() {

    CrashController.prototype.activeRound = null;

    function CrashController(controller) {
      this.controller = controller;
    }

    CrashController.prototype.setActiveRound = function(round) {
      return this.activeRound = round;
    };

    CrashController.prototype.checkForCrashes = function(player) {
      if (player.pos.x < this.controller.bitmap.boundariesWidth || player.pos.x > this.controller.bitmap.width - this.controller.bitmap.boundariesWidth || player.pos.y < this.controller.bitmap.boundariesWidth || player.pos.y > this.controller.bitmap.height - this.controller.bitmap.boundariesWidth) {
        return this.activeRound.notifyPlayerDeath(player);
      }
    };

    return CrashController;

  })();

  controller = new Controller();

  playersConfiguration = new Array({
    left: void 0,
    right: void 0,
    name: "Greenlee",
    colour: "green"
  }, {
    left: void 0,
    right: void 0,
    name: "Greydon",
    colour: "grey"
  }, {
    left: void 0,
    right: void 0,
    name: "Pinkney",
    colour: "pink"
  }, {
    left: void 0,
    right: void 0,
    name: "Fred",
    colour: "red"
  }, {
    left: void 0,
    right: void 0,
    name: "Bluebell",
    colour: "blue"
  }, {
    left: void 0,
    right: void 0,
    name: "Willem",
    colour: "orange"
  });

  window.setLeftKey = function(button, playerIndex) {
    var _this = this;
    return document.onkeydown = function(e) {
      playersConfiguration[playerIndex].left = e.keyCode;
      button.value = String.fromCharCode(e.keyCode);
      return document.onkeydown = void 0;
    };
  };

  window.setRightKey = function(button, playerIndex) {
    var _this = this;
    return document.onkeydown = function(e) {
      playersConfiguration[playerIndex].right = e.keyCode;
      button.value = String.fromCharCode(e.keyCode);
      return document.onkeydown = void 0;
    };
  };

  playerSelectionForm = document.getElementById("playerSelectionForm");

  canvas = document.getElementById("canvas");

  playerSelectionForm.onsubmit = function(event) {
    var cleanPlayersConfiguration, playerConfiguration, _i, _len;
    canvas.style.display = "block";
    cleanPlayersConfiguration = new Array();
    for (_i = 0, _len = playersConfiguration.length; _i < _len; _i++) {
      playerConfiguration = playersConfiguration[_i];
      if (playerConfiguration.left !== void 0 && playerConfiguration.right !== void 0) {
        cleanPlayersConfiguration.push(playerConfiguration);
      }
    }
    controller.run(cleanPlayersConfiguration);
    playerSelectionForm.style.display = "none";
    return false;
  };

}).call(this);
